/// <reference types="mongoose" />

declare module Model {
  import mongoose from "mongoose";

  interface GameMarketConfig {
    marketId: string;
    enabled: boolean;
    minBet: number;
    maxBet: number;
    iconSize: string;
    sortOrder: number;
    maxBetChoices: { name: string; maxBet: number }[];
    enabledChips: string[];
  }

  //#region Models

  interface MarketModel extends mongoose.Document {
    currencies: string[];
    marketName: string;
    enabled: boolean;
    defaultChipId: string;
    rate: number;
    isBase: boolean;
  }

  interface GameMarketModel extends mongoose.Document {
    gameId: number;
    gameName: string;
    markets: GameMarketConfig[];
    botEnabled: boolean;
    botMaxBet: number;
  }

  interface ChipModel extends mongoose.Document {
    label: string;
    value: number;
    enabled: boolean;
    theme: {
      backgroundColor: string;
      borderColor: string;
      centerColor: string;
      labelColor: string;
    };
  }

  interface GameConfigsModel extends mongoose.Document {
    name: string;
    enabled: boolean;
    minbet: number;
    maxbet: number;
    disabledround: number;
    botenabled: boolean;
    maxbot: number;
    bot_maxbet: number;
    bot_minbet: number;
    hour_maxbot: number[];
    disabled_message: string;
    choices_maxbet: Record<string, number>;
  }

  //#region Repositories

  interface MarketRepository extends mongoose.Model<MarketModel> {
    getAll(): Promise<MarketModel[]>;
  }

  interface GameMarketRepository extends mongoose.Model<GameMarketModel> {
    getByGameId(gameId: number): Promise<GameMarketModel>;
    getAll(): Promise<GameMarketModel[]>;
  }

  interface ChipRepository extends mongoose.Model<ChipModel> {
    getAll(): Promise<ChipModel[]>;
  }

  interface GameConfigsRepository extends mongoose.Model<GameConfigsModel> {
    getByName(name: string): Promise<GameConfigsModel>;
  }

  //#endregion
}
