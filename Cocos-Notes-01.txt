

Beginer Guide

Adding component scripts to implement interactive functions
Scripting development using dynamic language support, you can use JavaScript to develop games,
quickly preview and debug on physical machines and devices, and update your published games.
TypeScript is also supported and can be mixed with your JavaScript code at the same time.


Packages folder is used to place custom extensions for this project.
If you need to install the extension manually, you can create this folder manually.
If you need to uninstall the extension, delete the corresponding folder in packages.


When the move transform tool is activated:
Press red arrow and drag mouse, then the node will be moved on the x axis;
Press green arrow and drag mouse, then the node will be moved on the y axis;
Press blue cube and drag mouse, then the node will be moved freely on both the axises.


When you need to edit several assets properties of the same type at once, you can press Shift in the Assets panel to select several assets,
and then the Properties panel will display the number of selected assets and editable asset properties.
After that, click the Apply button on the top right.




Open your project in Cocos Creator, and choose Developer -> VS Code Workflow -> Install VS Code Extension from main menu.
Let's run VS Code, and choose File -> Open... from main menu, then select your project's root folder and click Open.
Now you can create a new script or edit existing script and enjoy autocomplete and syntax highlight.


https://docs.cocos.com/creator/manual/en/getting-started/coding-setup.html
Use VS Code to activate script compilation
Install cURL
In the Creator Editor main menu, execute Developer -> VS Code Workflow -> Add Compile Task. This operation will add the tasks.json task configuration file in the .vscode folder of the project.
Press Cmd/Ctrl+p in VS Code to activate Quick open input box, then enter task compile and select compile.
Ctrl+P > task compile

workbench.action.tasks.runTask
Ctrl B, Ctrl B


https://discuss.cocos2d-x.org/t/how-to-edit-code-with-vscode/35907
To use VS Code as the default editor, open the properties menu (on Mac it’s under CocosCreator). On the left hand side select the “Data Editor” path. There you can change the External Script Editor to be VS Code. Creator will now use VS Code when you click on scripts.
If you look in the developer menu, there’s a VS Code workflow menu, I believe the first option puts the creator.d.ts file in the proper spot for Intellisense.
C:\Users\louis.nguyen\AppData\Local\Programs\Microsoft VS Code\Code.exe



https://www.cocos.com/en/the-best-software-tools-to-use-with-cocos
In Cocos Creator, cc.tween provides a chain-created method that can manipulate any object, and easing any of the object's properties.
cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);
cc.systemEvent.off(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);
cc.director.loadScene('game');
this.player.stopAllActions(); 


Cocos Creator provides is a more thorough data driven method. All the information edited in the editor will be serialized into data documents.
Understanding workflows of Cocos Creator from the angle of data driven
In Cocos Creator, when developers have finished building scenes in editor,
all the data will be saved as a scene-name.fire document and then be stored in Asset Database.
Developers can load a scene resource by using cc.director.loadScene.
 
 
 
---------------------------------------------------------------------------------

Asset workflow

When importing any asset files in assets folder a Meta file will be generated for each asset, with the same filename at the same location.

Warning: Unmatched asset meta found
If you move or rename asset file in Explorer or Finder without moving or renaming the meta files accordingly,
the Editor will consider the moved or renamed asset as newly imported thus creating new meta files with new uuid.
Also the old meta files will have no matched asset and be removed.
It will also cause missing reference to the asset (including scripts) in scenes and prefabs.

Any unmatched meta files will be removed from assets folder, and will be backed up to temp folder.

File -> Export Asset
File -> Import Asset

To enable auto releasing, select the desired scene in Assets panel, then change the "Auto Release Assets" property in Properties panel, the property is true by default.

With the auto releasing enabled for a scene, if some of the scene's assets are saved in the script as "special reference",
these references will become invalid once the scene switched, since the resource has been released, may cause rendering problems.
To prevent these assets from being released automatically, we can use Asset.addRef to retain them.

When loading a scene, if its "Async Load Assets" is set to false, all its dependent assets (including recursive dependents) will be load and the scene will launch after loaded completely.


You can choose Auto Sync or Manual Sync for every prefab instances in the scene.
If set to Manual Sync, when its originating asset changed, the prefab instances will NOT dynamically refresh to stay synchronized with the originating asset. Refreshing only triggered when users manually revert the prefab.
If set to Auto Sync, the prefab instances will dynamically refresh to stay synchronized with the originating asset.

After deleting a prefab from the Assets panel, you can convert the corresponding prefab instance in the scene to an ordinary node.
To do this, select the prefab instance and click menu Node -> Convert to Regular Node.


Then you can generate Atlas by special tools. We suggest:
https://www.codeandweb.com/texturepacker
https://zwopple.com/zwoptex/

In Assets panel right-click on a folder, and click the following context menu item Create -> Auto Atlas.
It will create a AutoAtlas.pac asset to hold your atlas configuration for current folder.
With an Auto Atlas asset created, all SpriteFrame assets in the current folder including sub-folders will be used to generate a sprite sheet atlas during build process.
And all SpriteFrame assets added to the folder or its sub-folder will be added to the atlas automatically in the future.


cc.assetManager.loadRemote('http://example.com/background.mp3', callback);
cc.assetManager.loadRemote('http://example.com/background.mp3', { audioLoadMode: cc.AudioClip.LoadMode.DOM_AUDIO }, callback);

Creator has officially supported the JSON file since 1.10. All the .json files under the project's assets folder are imported as cc.JsonAsset.
Creator has officially supported text files since 1.10. Common text formats such as .txt, .plist, .xml, .json, .yaml, .ini, .csv, .md will be imported as cc.TextAsset.



---------------------------------------------------------------------------------

Scene Building Workflow


We can add multiple components to one node so that we can compose varying features to an element.
In the example above, we can continue to select the New Sprite node, click the Add component button
at the bottom of the Properties panel and select UI Component -> Button to add a Button component.


Anchor is another important property of nodes. It determines which point in the constraint frame of the node itself should be taken as the position of the whole node.
The position we see the transformation tool show after we choose the node is the anchor position of the node.
Once the anchor position is decided, all the child nodes will take the anchor position as the coordinate origin.

The engine will render all nodes according to the order in Node Tree, from top to bottom.
So that the node on bottom will be drawn over the node on top.

In a parent child relationship, the parent node is always on top, so child node will be rendered last.
That's why we make a separate body node in the example, so that we can specify the exact order of shadow and body.



---------------------------------------------------------------------------------


Workflow of script development


Recommended coding standards
It is recommended to use full uppercase underline to name “constant”.
Use underscores _ when naming private attributes
We use dash nomenclature for files
Try your best to use single quotation marks '' to define a string in js code
When defining multi-lines string, try your best to use +
Use === and !== rather than == and !=

Please add ; at the end of the statement.
Please put a space before ( of the logic state expressions ( if, else, while, switch)
Leave one space between the binary ternary operators



Inheritance
extends: Shape
The constructor of the super class will be automatically invoked at first before the instantiation of the child class, you do not need to call it explicitly by yourself.

After setting get or set in the property, when you access the property, the pre-defined get or set method will be triggered. Defining the method is as follows:
You can define the get method only, so this is like one property of read only.



Access node and other component
Getting the node which the component belong is easy, just use this.node variable in component:
You will get other component in the same node frequently, that is where getComponent comes in, it help you to find the component you need.

this.node.getChildByName("Cannon 01");
cc.find("Cannon 01/Barrel/SFX", this.node);
When omit the second parameter of cc.find, it will find starts from the scene root:



https://docs.cocos.com/creator/manual/en/scripting/basic-node-api.html
this.node.removeFromParent(false);
parentNode.addChild(this.node);
removeFromParent usually need to pass a false, otherwise it will clear all the events and actions on the node.
Creating a new node with Creating and Destroying Nodes section, you'll need to give the newly created node a parent to initialize it properly.



Life cycle callback
onLoad
	triggered when the node is first activated
start
	triggered before the first activation of the component
update
lateUpdate
	perform other operations after update of all the components are done, then we'll need the lateUpdate callback.
onDestroy
onEnable
	.If the node is created for the first time, and enabled is true, then it will be called after onLoad but before start.
onDisable



Scene Managing
There's only one scene running at the same time, when switching scenes the previous scene will be destroyed.
To easily store and pass information among scenes we can mark a node as persist node to prevent it from being destroyed during scene switch.
This way the node and all the component instances attached to it will remain in memory.

cc.director.loadScene("MyScene", onSceneLaunched);
Sometimes we need to load new scene in the background when still running previous scene, and only switch scene when new scene is loaded.
We can use cc.director.preloadScene to do this:

Each asset provides two methods addRef and decRef that you can use to control references to dynamic resources, for example:


Developers can divide the scenes, resources, and code in the project into different Asset Bundles, which will not be loaded at game launch,
but will be loaded by developers manually calling loadBundle during the game, thus effectively reducing the startup time of the game and make loading on demand as easy as possible.
The Asset Bundle is configured in folders.
When we select a folder in the Assets panel, the Properties panel will show a Is Bundle option, if set, the folder-related configuration options will appear:
cc.assetManager.loadBundle('01_graphics', (err, bundle) => {
    bundle.load('xxx');
});

// Reuse Asset Bundles from other projects
cc.assetManager.loadBundle('https://othergame.com/remote/01_graphics', (err, bundle) => {
    bundle.load('xxx');
});

After the Asset Bundle has been loaded, it will be cached, and you can use the name to get the Asset Bundle. For example:
let bundle = cc.assetManager.getBundle('01_graphics');

Release resources in the Asset Bundle
Remove the Asset Bundle

We've made some optimizations for passing event arguments since v2.0.
When emitting event, you could pass five extra parameters from the second one to the sixth one in the emit function call,
they will be transferred as final arguments to invoke the callback function registered in on function.


Be noted, when you want to dispatch a custom event, please do not use cc.Event because it's an abstract class, instead, you should use cc.Event.EventCustom to dispatch a custom event.
https://docs.cocos.com/creator/manual/en/scripting/internal-events.html
cc.Node.EventType.MOUSE_DOWN
this.node.pauseSystemEvents();
this.node.resumeSystemEvents();

https://docs.cocos.com/creator/manual/en/scripting/player-controls.html
Global system events are irrelevant with the node hierarchy, so they are dispatched globally by cc.systemEvent, currently supported:


Compared to easing, custom progress function has more freedom to control the easing process.
// Customize the progress for all properties
cc.tween().to(1, { scale: 2, rotation: 90 }, {
  progress: (start, end, current, ratio) => {
    return start + (end - start) * ratio;
  }
})

// Customize the progress for a single property
cc.tween().to(1, {
  scale: 2,
  position: {
    value: cc.v3(),
    progress: (start, end, current, t) => {
      // Note that the passed in property is cc.Vec3, so you need to use Vec3.lerp for interpolation calculations
      return start.lerp(end, t, current);
    }
  }
})

Parallel execution easing
Delayed execution

https://docs.cocos.com/creator/manual/en/scripting/actions.html
Developers can also set tags for the actions and control the actions by tag.
// set tag for the action
var ACTION_TAG = 1;
action.setTag(ACTION_TAG);
// get the action by tag
node.getActionByTag(ACTION_TAG);
// stop one action by tag
node.stopActionByTag(ACTION_TAG);

https://docs.cocos.com/creator/manual/en/scripting/action-list.html




Using the timer
Some people may think setTimeout and setInterval are enough.
Developers surely can use these two functions, but we prefer using the timer more as it is quicker and more powerful and it combines better with the components!
The developer can use the call-back function itself to cancel the timer:


The sequence of component scripts executed on the same node can be controlled by the order in which the components are in the Properties. 


Standard network interface
In Cocos Creator, we support the most widely used standard network interface on the Web platform:
XMLHttpRequest: for short connection
WebSocket: for long connection


Pooling
We recommend to only create node and component instance in onLoad life cycle callback during scene initialization, and only destroy them at scene switching.
If we are making a game with lots of dynamically generated and destroyed enemies and bullets,
how can we keep the performance cost of instance creating and destroying from messing up our framerate?
It would be a perfect case for node pooling to shine.

Node Pool is a collection of reusable node object.
We can use new cc.NodePool() to create an instance of Node Pool for a certain node template.
Create your prefab
Create Node Pool instance
Requesting node from pool
Return node to the pool
Register reuse and unuse callback
Clear Node Pool

The considerations of cc.NodePool
When you get and return nodes, addChild and removeFromParent will be constantly executed on nodes by cc.NodePool,
when operating Node Pools in large quantities and frequently, such as making shooting game barrage, which may still lead to performance degradation on low-end device.


Modularize Script
What require returned is the object exported by the module
module.exports value can be any JavaScript type.



CCClass Advanced Reference
Static variable and static method
Static variables and static methods can be defined in statics property of the Prototype Object.

Different from constructor, overridden method from parent class will not be called automatically, so you need to call explicitly if needed:


Property delay definition
If two classes refer to each other, in the script load phase there will be a circular reference, the circular reference will lead to script loading error:
=> đưa import statement vào function lúc cần thiết




The script loading order is as follows:
Cocos2d engine
Plugin Script (If there are multiple, they are loaded in alphabetical order according to the path in the project)
Normal Script (Only one file after packing, the internal scripts will be initialized in the order of require dependencies)
=> Import As Plugin

http://bonsaiden.github.io/JavaScript-Garden/

https://docs.cocos.com/creator/manual/en/scripting/typescript.html




---------------------------------------------------------------------------------

https://service.cocos.com/document/en/


Release a Game on Web platform
You can use cc.view.enableRetina(true) to set the high resolution in the script, and the Retina display will be turned on by default when you build to the Web platform.
Release a game on Web server
If you want to release or share your games on the Internet, click the Open button next to Build path.
After opening the release path, copy everything in the built web-mobile or web-desktop folders, and drop them into your Web server. Then you can see the game later there.


https://docs.cocos.com/creator/manual/en/publish/debug-jsb.html
First choose to use the Simulator (debug) as the preview platform on the top of the editor toolbar, and then click the Run Preview button in the editor to run the game in the simulator.
After running the simulator, open the address devtools://devtools/bundled/js_app.html?v8only=true&ws=127.0.0.1:5086/00010002-0003-4004-8005-000600070008 directly with the Chrome browser to debug.
(If you are using an older version of Chrome, you need to change the devtools at the beginning of the address to chrome-devtools)


Screenshot
Screenshot is a very common demand in the game, through the camera and rendertexture we can quickly achieve a screenshot function.




https://docs.cocos.com/creator/manual/en/physics/collision/edit-collider-component.html
Polygon Collider
Group Management
In the Group Collide Map section we can control whether collide is allowed for each group with any other groups. The Collide map looks like this:



https://docs.cocos.com/creator/manual/en/3d/lighting.html
https://docs.cocos.com/creator/manual/en/extension/your-first-extension.html


Internationalization (i18n)
To enable i18n, put an i18n folder in your package path and add a javascript file named for each language code (e.g. en.js for english).


https://docs.cocos.com/creator/manual/en/advanced-topics/hot-update.html
https://docs.cocos.com/creator/manual/en/advanced-topics/data-storage.html
Cocos Creator we use cc.sys.localStorage API to save and read user data.






---------------------------------------------------------------------------------

Tutorial Flappy Bird
	Demo: https://zzxgame.com.cn/FlappyBirdDemo_Preview/	
	Part 1: https://www.cocos.com/7398	
	Part 2: https://www.cocos.com/?p=7410?language=en#7410	


A few tips
The mouse is within the scope of the scene editor, the scene can be zoomed in and out by the mouse wheel.
After zooming in or out, the node we want to see is often not in the middle of the scene editor. Select the node, and then use CTRL + F so that the IDE will automatically move the selected node to the middle of the scene editor.
Every modification changes the project. CTRL + S saves the current scene. It is always a good habit to save often.


https://discuss.cocos2d-x.org/t/tutorial-cocos-creator-learning-flappy-bird-part-7/49418
https://scottsauber.com/2017/06/10/prettier-format-on-save-never-worry-about-formatting-javascript-again/
File >> Preferences >> Settings >> Search for Format On Save and check the box
Config: defaultFormatter = esbenp.prettier
  "editor.formatOnPaste": true,
  "editor.formatOnSave": true,
  "[typescript]": { "editor.defaultFormatter": "esbenp.prettier-vscode" },
  "[typescriptreact]": { "editor.defaultFormatter": "esbenp.prettier-vscode" }






















---------------------------------------------------------------------------------















